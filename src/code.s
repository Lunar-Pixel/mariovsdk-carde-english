@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_02000D48
.data
	.align	2, 0
	.type	 gUnknown_02000D48,object
	.size	 gUnknown_02000D48,32
gUnknown_02000D48:
	.short	0x0
	.short	0x7fff
	.space	28
	.globl	gUnknown_02000D68
	.type	 gUnknown_02000D68,object
gUnknown_02000D68:
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x7
	.size	 gUnknown_02000D68,6
	.globl	gUnknown_02000D6E
	.type	 gUnknown_02000D6E,object
gUnknown_02000D6E:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.size	 gUnknown_02000D6E,6
	.section .rodata
	.align	2, 0
.LC5:
	.ascii	"\203}\203\212\203I\201@\202\226\202\223\201D\201@\203h\203"
	.ascii	"\223\203L\201[\203R\203\223\203O\201@\203J\201[\203h\202"
	.ascii	"\205\201{\000"
	.align	2, 0
.LC8:
	.ascii	"\203}\203\212\203I\201@\202\226\202\223\201D\201@\203h\203"
	.ascii	"\223\203L\201[\203R\203\223\203O\000"
.text
	.align	2, 0
	.globl	AgbMain
	.type	 AgbMain,function
	.thumb_func
AgbMain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x100
	ldr	r4, .L12
	ldr	r0, .L12+0x4
	ldr	r2, [r4]
	mov	r1, #0x64
	bl	_call_via_r2
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	ldr	r3, [r4]
	mov	r1, #0x4e
	mov	r2, #0x0
	bl	_call_via_r3
	ldr	r6, .L12+0x8
	ldr	r1, .L12+0xc
	ldr	r5, [r4]
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	_call_via_r5
	ldr	r1, .L12+0x10
	ldr	r5, [r4]
	add	r0, r6, #0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	_call_via_r5
	bl	sub_02000260
	ldr	r6, .L12+0x14
	mov	r1, #0xb5
	lsl	r1, r1, #0x2
	add	r0, r6, #0
	bl	sub_02000980
	ldr	r0, .L12+0x18
	ldr	r1, .L12+0x1c
	ldr	r2, [r4]
	bl	_call_via_r2
	mov	r0, #0xa4
	lsl	r0, r0, #0x2
	ldr	r1, .L12+0x20
	mov	r2, #0x81
	lsl	r2, r2, #0x1
	ldr	r3, .L12+0x24
	ldr	r5, [r4]
	bl	_call_via_r5
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L12+0x28
	lsl	r1, r7, #0x8
	ldr	r2, [r4]
	bl	_call_via_r2
	ldr	r0, .L12+0x2c
	ldr	r3, [r4]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	_call_via_r3
	ldr	r0, .L12+0x30
	ldr	r2, [r4]
	add	r1, r7, #0
	bl	_call_via_r2
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldr	r3, [r4]
	add	r1, r7, #0
	bl	_call_via_r3
	ldr	r0, .L12+0x34
	mov	r2, #0xa1
	lsl	r2, r2, #0x3
	ldr	r3, .L12+0x38
	ldr	r4, [r4]
	add	r1, r7, #0
	bl	_call_via_r4
	mov	r1, sp
	mov	r0, #0x81
	strb	r0, [r1]
	mov	r0, #0x75
	strb	r0, [r1, #0x1]
	add	r2, r6, #0
	add	r2, r2, #0x10
	add	r1, r1, #0x2
	ldrb	r0, [r6, #0x10]
	cmp	r0, #0
	beq	.L4	@cond_branch
.L5:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L5	@cond_branch
.L4:
	mov	r0, #0x81
	strb	r0, [r1]
	add	r1, r1, #0x1
	mov	r0, #0x76
	strb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	ldr	r5, .L12
	mov	r2, #0xa2
	lsl	r2, r2, #0x3
	ldr	r4, [r5]
	ldr	r0, .L12+0x34
	add	r1, r7, #0
	mov	r3, sp
	bl	_call_via_r4
	ldr	r2, .L12+0x3c
	ldr	r3, .L12+0x40
	ldr	r4, [r5]
	mov	r0, #0xa4
	lsl	r0, r0, #0x2
	ldr	r1, .L12+0x20
	bl	_call_via_r4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r7, #0x8
	ldr	r2, [r5]
	ldr	r0, .L12+0x28
	bl	_call_via_r2
	ldr	r0, .L12+0x2c
	mov	sl, r0
	ldr	r3, [r5]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	_call_via_r3
	ldr	r0, .L12+0x30
	mov	r8, r0
	ldr	r2, [r5]
	add	r1, r7, #0
	bl	_call_via_r2
	mov	r6, #0xa6
	lsl	r6, r6, #0x2
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	mov	r9, r0
	ldr	r3, [r5]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, r9
	bl	_call_via_r3
	ldr	r3, .L12+0x44
	ldr	r4, [r5]
	mov	r0, #0xa4
	lsl	r0, r0, #0x2
	ldr	r1, .L12+0x20
	mov	r2, #0x0
	bl	_call_via_r4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r4, #0x8
	mov	r0, #0x2
	orr	r1, r1, r0
	ldr	r2, [r5]
	ldr	r0, .L12+0x28
	bl	_call_via_r2
	ldr	r3, [r5]
	mov	r0, sl
	add	r1, r4, #0
	mov	r2, #0x0
	bl	_call_via_r3
	ldr	r2, [r5]
	mov	r0, r8
	add	r1, r4, #0
	bl	_call_via_r2
	ldr	r3, [r5]
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, r9
	bl	_call_via_r3
	ldr	r2, .L12+0x48
	ldr	r3, .L12+0x4c
	ldr	r6, [r5]
	ldr	r0, .L12+0x34
	add	r1, r4, #0
	bl	_call_via_r6
	ldr	r0, .L12+0x50
	ldr	r3, [r5]
	mov	r1, #0x10
	mov	r2, #0x23
	bl	_call_via_r3
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	ldr	r2, [r5]
	mov	r1, #0x10
	bl	_call_via_r2
	mov	r4, #0x0
	ldr	r0, .L12+0x54
	strb	r4, [r0]
	add	r6, r0, #0
.L7:
	ldr	r2, [r5]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	mov	r1, #0x1
	bl	_call_via_r2
	add	r0, r4, #0
	bl	sub_020008A4
	strb	r0, [r6]
	add	r0, r7, #0
	bl	sub_020009A0
	ldr	r1, [r5]
	ldr	r0, .L12+0x58
	bl	_call_via_r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrb	r0, [r6]
	cmp	r0, #0
	beq	.L7	@cond_branch
	mov	r0, #0x2
	add	sp, sp, #0x100
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	gSomeFuncPtr
	.word	0x2ea
	.word	0x27e
	.word	gUnknown_02001070
	.word	gUnknown_02000D48
	.word	gUnknown_02000D8C
	.word	0x2c3
	.word	sub_020005C4
	.word	0x101
	.word	0x1e03
	.word	0x29a
	.word	0x291
	.word	0x292
	.word	0x299
	.word	.LC5
	.word	0x105
	.word	0x1e10
	.word	0x1e02
	.word	0x402
	.word	.LC8
	.word	0x21a
	.word	gUnknown_020010B4
	.word	0x301
.Lfe1:
	.size	 AgbMain,.Lfe1-AgbMain
	.globl	unusedString
	.section .rodata
	.align	2, 0
	.type	 unusedString,object
	.size	 unusedString,15
unusedString:
	.ascii	"MultiSio010918\000"
	.globl	gStringTable
.data
	.align	2, 0
	.type	 gStringTable,object
gStringTable:
	.word	.LC11
	.word	.LC11
	.word	.LC12
	.word	.LC13
	.word	.LC14
	.word	.LC13
	.section .rodata
	.align	2, 0
.LC14:
	.ascii	"\202\273\202\244\202\265\202\361\202\251\202\361\202\350"
	.ascii	"\202\345\202\244\201B\n\n\202`\203{\203^\203\223\202\360"
	.ascii	"\202\250\202\267\202\306\202\340\202\244\202\242\202\277"
	.ascii	"\202\307\202\273\202\244\202\265\202\361\202\265\202\334"
	.ascii	"\202\267\201B\n\202a\203{\203^\203\223\202\360\202\250\202"
	.ascii	"\267\202\306\203L\203\203\203\223\203Z\203\213\202\265\202"
	.ascii	"\334\202\267\201B\000"
	.align	2, 0
.LC13:
	.ascii	"\202\273\202\244\202\265\202\361\202\277\202\343\202\244"
	.ascii	"\201B\n\n\203Q\201[\203\200\203{\201[\203C\203A\203h\203"
	.ascii	"o\203\223\203X\202\314\202\305\202\361\202\260\202\361\202"
	.ascii	"\360\202\253\202\301\202\275\202\350\201A\202\302\202\244"
	.ascii	"\202\265\202\361\n\203P\201[\203u\203\213\202\360\202\312"
	.ascii	"\202\242\202\275\202\350\202\265\202\310\202\242\202\305"
	.ascii	"\202\255\202\276\202\263\202\242\201B\000"
	.align	2, 0
.LC12:
	.ascii	"\202\273\202\244\202\265\202\361\202\314\202\346\202\244"
	.ascii	"\202\242\202\252\202\305\202\253\202\334\202\265\202\275"
	.ascii	"\201B\n\n\202\302\202\244\202\265\202\361\202\275\202\242"
	.ascii	"\202\253\202\277\202\343\202\244\201B\000"
	.align	2, 0
.LC11:
	.ascii	"\202\273\202\244\202\265\202\361\202\314\202\346\202\244"
	.ascii	"\202\242\202\252\202\305\202\253\202\334\202\265\202\275"
	.ascii	"\201B\n\n\203J\201[\203h\202\205\203\212\201[\203_\201[\201"
	.ascii	"{\202\252\202\263\202\263\202\301\202\304\202\242\202\351"
	.ascii	"\203Q\201[\203\200\203{\201[\203C\203A\203h\203o\203\223"
	.ascii	"\n\203X\202\306\201A\203}\203\212\203I\202\226\202\223\201"
	.ascii	"D\203h\203\223\203L\201[\203R\203\223\203O\202\314\203J\201"
	.ascii	"[\203g\203\212\203b\203W\202\252\202\263\202\263\n\202\301"
	.ascii	"\202\304\202\242\202\351\203Q\201[\203\200\203{\201[\203"
	.ascii	"C\203A\203h\203o\203\223\203X\202\360\201A\202\302\202\244"
	.ascii	"\202\265\202\361\203P\201[\203u\203\213\202\305\n\202\302"
	.ascii	"\202\310\202\254\201A\203\201\203j\203\205\201[\202\305\201"
	.ascii	"u\203X\203e\201[\203W\202\360\202\302\202\242\202\251\201"
	.ascii	"v\202\360\202\246\202\347\202\361\202\305\203X\203^\n\201"
	.ascii	"[\203g\202\263\202\271\202\304\202\255\202\276\202\263\202"
	.ascii	"\242\201B\n\202a\203{\203^\203\223\202\360\202\250\202\267"
	.ascii	"\202\306\203L\203\203\203\223\203Z\203\213\202\265\202\334"
	.ascii	"\202\267\201B\n\000"
	.size	 gStringTable,24
.text
	.align	2, 0
	.globl	sub_02000260
	.type	 sub_02000260,function
	.thumb_func
sub_02000260:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r3, .L20
	mov	r4, #0x0
	strh	r4, [r3]
	ldr	r2, .L20+0x4
	ldrh	r1, [r2]
	ldr	r0, .L20+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r3]
	ldr	r0, .L20+0xc
	strh	r4, [r0]
	sub	r2, r2, #0xd8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	str	r0, [r2]
	ldrh	r0, [r2]
	ldr	r3, .L20+0x10
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L20+0x14
	ldr	r2, .L20+0x18
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r4, #0x14]
	add	r0, r4, #0
	add	r0, r0, #0x60
	str	r0, [r4, #0x28]
	add	r0, r0, #0x18
	str	r0, [r4, #0x2c]
	mov	r3, #0x0
	add	r5, r4, #0
	add	r5, r5, #0xc0
	mov	r2, #0x0
	mov	r7, #0x30
	add	r7, r7, r4
	mov	r8, r7
	mov	r0, #0x90
	add	r0, r0, r4
	mov	ip, r0
	add	r6, r4, #0
	add	r6, r6, #0xa8
	mov	r7, #0x40
	add	r7, r7, r4
	mov	r9, r7
.L18:
	lsl	r1, r3, #0x2
	mov	r7, ip
	add	r0, r2, r7
	mov	r7, r8
	add	r7, r7, #0x4
	mov	r8, r7
	sub	r7, r7, #0x4
	stmia	r7!, {r0}
	add	r0, r2, r6
	mov	r7, r9
	add	r7, r7, #0x4
	mov	r9, r7
	sub	r7, r7, #0x4
	stmia	r7!, {r0}
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r1, r1, r0
	str	r5, [r1]
	add	r5, r5, #0x48
	add	r2, r2, #0x48
	add	r3, r3, #0x1
	cmp	r3, #0x1
	ble	.L18	@cond_branch
	mov	r0, #0x0
	ldr	r3, .L20
	strh	r0, [r3]
	ldr	r2, .L20+0x4
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r3]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000134
	.word	0x4003
	.word	gUnknown_020010D0
	.word	0x5000048
.Lfe2:
	.size	 sub_02000260,.Lfe2-sub_02000260
	.align	2, 0
	.globl	sub_02000340
	.type	 sub_02000340,function
	.thumb_func
sub_02000340:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	mov	ip, r1
	ldr	r6, .L45
	ldr	r5, [r6]
	ldr	r0, .L45+0x4
	ldrb	r2, [r0, #0x1]
	add	r7, r0, #0
	cmp	r2, #0x1
	beq	.L31	@cond_branch
	cmp	r2, #0x1
	bgt	.L38	@cond_branch
	cmp	r2, #0
	beq	.L27	@cond_branch
	b	.L26
.L46:
	.align	2, 0
.L45:
	.word	0x4000128
	.word	gUnknown_020010D0
.L38:
	cmp	r2, #0x2
	beq	.L35	@cond_branch
	b	.L26
.L27:
	mov	r1, #0x30
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L28	@cond_branch
	mov	r0, #0x88
	add	r4, r5, #0
	and	r4, r4, r0
	cmp	r4, #0x8
	bne	.L26	@cond_branch
	mov	r1, #0x4
	add	r0, r5, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L28	@cond_branch
	ldr	r1, [r7, #0x14]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L28	@cond_branch
	ldr	r3, .L47
	strh	r2, [r3]
	ldr	r2, .L47+0x4
	ldrh	r1, [r2]
	ldr	r0, .L47+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r3]
	ldrb	r1, [r6, #0x1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r6, #0x1]
	ldr	r1, .L47+0xc
	mov	r0, #0xc0
	strh	r0, [r1]
	sub	r1, r1, #0xf6
	ldr	r0, .L47+0x10
	str	r0, [r1]
	strb	r4, [r7]
.L28:
	mov	r0, #0x1
	strb	r0, [r7, #0x1]
.L31:
	ldr	r1, .L47+0x14
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0x7
	bhi	.L33	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	b	.L35
.L48:
	.align	2, 0
.L47:
	.word	0x4000208
	.word	0x4000200
	.word	0xff7f
	.word	0x4000202
	.word	0xb1fc
	.word	gUnknown_020010D0
.L33:
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
.L35:
	mov	r0, ip
	bl	sub_020004E0
	mov	r0, r8
	bl	sub_0200046C
.L26:
	ldr	r1, .L49
	ldrb	r0, [r1, #0xb]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xb]
	ldrb	r3, [r1, #0x3]
	ldrb	r0, [r1, #0x2]
	lsl	r2, r0, #0x8
	ldrb	r0, [r1]
	add	r7, r1, #0
	cmp	r0, #0x8
	bne	.L39	@cond_branch
	mov	r0, #0x80
	orr	r0, r0, r2
	orr	r0, r0, r3
	b	.L40
.L50:
	.align	2, 0
.L49:
	.word	gUnknown_020010D0
.L39:
	add	r0, r3, #0
	orr	r0, r0, r2
.L40:
	add	r2, r0, #0
	ldrb	r0, [r7, #0x9]
	cmp	r0, #0
	beq	.L42	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r2, r2, r0
.L42:
	ldrb	r0, [r7, #0xa]
	lsr	r0, r0, #0x3
	lsl	r1, r0, #0xf
	lsl	r0, r5, #0x1a
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	bls	.L43	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	orr	r0, r0, r1
	orr	r0, r0, r2
	b	.L44
.L43:
	add	r0, r2, #0
	orr	r0, r0, r1
.L44:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 sub_02000340,.Lfe3-sub_02000340
	.align	2, 0
	.globl	sub_0200046C
	.type	 sub_0200046C,function
	.thumb_func
sub_0200046C:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L59
	ldr	r2, [r4, #0x28]
	ldrb	r1, [r4, #0xb]
	strb	r1, [r2]
	ldr	r3, [r4, #0x28]
	ldrb	r1, [r4, #0x2]
	ldrb	r2, [r4, #0x3]
	eor	r1, r1, r2
	strb	r1, [r3, #0x1]
	ldr	r1, [r4, #0x28]
	strh	r5, [r1, #0x2]
	ldr	r1, [r4, #0x28]
	add	r1, r1, #0x4
	ldr	r2, .L59+0x4
	bl	CpuSet
	mov	r2, #0x0
	ldr	r1, [r4, #0x28]
.L55:
	ldrh	r0, [r1]
	add	r5, r5, r0
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x9
	bls	.L55	@cond_branch
	add	r2, r4, #0
	ldr	r1, [r2, #0x28]
	mvn	r0, r5
	sub	r0, r0, #0xc
	strh	r0, [r1, #0x2]
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r1, .L59+0x8
	mov	r0, #0x0
	strh	r0, [r1]
.L57:
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r4, #0x14]
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r1, .L59+0x8
	mov	r0, #0xc0
	strh	r0, [r1]
.L58:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_020010D0
	.word	0x4000004
	.word	0x400010e
.Lfe4:
	.size	 sub_0200046C,.Lfe4-sub_0200046C
	.align	2, 0
	.globl	sub_020004E0
	.type	 sub_020004E0,function
	.thumb_func
sub_020004E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	str	r0, [sp, #0xc]
	mov	r1, #0x0
	str	r1, [sp]
	ldr	r0, .L78
	strh	r1, [r0]
	ldr	r3, .L78+0x4
	add	r0, sp, #0x4
	mov	sl, r0
	add	r1, sp, #0x8
	mov	r9, r1
	add	r2, r3, #0
	add	r2, r2, #0x3c
	mov	r4, #0x3
.L65:
	ldr	r1, [r2, #0x10]
	ldr	r0, [r2]
	str	r0, [r2, #0x10]
	stmia	r2!, {r1}
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L65	@cond_branch
	ldr	r0, [r3]
	str	r0, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [r3]
	ldr	r1, .L78
	mov	r0, #0x1
	strh	r0, [r1]
	sub	r0, r3, #0x4
	strb	r2, [r0, #0x3]
	mov	r4, #0x0
	mov	r8, r0
	mov	r7, r8
	add	r7, r7, #0x50
.L70:
	mov	r3, #0x0
	mov	r2, #0x0
	lsl	r5, r4, #0x2
	add	r6, r4, #0x1
	add	r0, r5, r7
	ldr	r1, [r0]
.L74:
	ldrh	r0, [r1]
	add	r3, r3, r0
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x9
	bls	.L74	@cond_branch
	mov	r2, sl
	add	r0, r2, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L76	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xd
	neg	r1, r1
	cmp	r0, r1
	bne	.L76	@cond_branch
	add	r0, r5, r7
	ldr	r0, [r0]
	add	r0, r0, #0x4
	lsl	r1, r4, #0x4
	ldr	r2, [sp, #0xc]
	add	r1, r2, r1
	ldr	r2, .L78+0x8
	bl	CpuSet
	mov	r0, #0x1
	lsl	r0, r0, r4
	mov	r2, r8
	ldrb	r1, [r2, #0x3]
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
.L76:
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r5, r7
	ldr	r1, [r0]
	add	r1, r1, #0x4
	mov	r0, r9
	ldr	r2, .L78+0xc
	bl	CpuSet
	add	r4, r6, #0
	cmp	r4, #0x1
	ble	.L70	@cond_branch
	ldr	r1, .L78+0x10
	ldrb	r0, [r1, #0x2]
	ldrb	r2, [r1, #0x3]
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L79:
	.align	2, 0
.L78:
	.word	0x4000208
	.word	gUnknown_020010D0+0x4
	.word	0x4000004
	.word	0x5000004
	.word	gUnknown_020010D0
.Lfe5:
	.size	 sub_020004E0,.Lfe5-sub_020004E0
	.align	2, 0
	.globl	sub_020005C4
	.type	 sub_020005C4,function
	.thumb_func
sub_020005C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L95
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r2, .L95+0x4
	ldr	r3, .L95+0x8
	ldr	r0, [r3]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	strb	r0, [r2, #0x9]
	ldr	r1, [r2, #0x14]
	mov	r0, #0x1
	neg	r0, r0
	mov	ip, r2
	cmp	r1, r0
	bne	.L81	@cond_branch
	ldr	r0, .L95+0xc
	strh	r0, [r3, #0x2]
	ldr	r1, [r2, #0x2c]
	ldr	r0, [r2, #0x28]
	str	r0, [r2, #0x2c]
	str	r1, [r2, #0x28]
	b	.L82
.L96:
	.align	2, 0
.L95:
	.word	0x4000120
	.word	gUnknown_020010D0
	.word	0x4000128
	.word	0xfefe
.L81:
	cmp	r1, #0
	blt	.L82	@cond_branch
	mov	r2, ip
	ldr	r0, [r2, #0x2c]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strh	r0, [r3, #0x2]
.L82:
	mov	r1, ip
	ldr	r0, [r1, #0x14]
	cmp	r0, #0xa
	bgt	.L84	@cond_branch
	add	r0, r0, #0x1
	str	r0, [r1, #0x14]
.L84:
	mov	r2, #0x0
	mov	r8, r2
	mov	sl, ip
	mov	r9, r2
	mov	r6, ip
	add	r6, r6, #0x18
	mov	r5, sp
.L88:
	ldrh	r0, [r5]
	mov	r1, r8
	lsl	r7, r1, #0x2
	ldr	r2, .L97
	cmp	r0, r2
	bne	.L89	@cond_branch
	ldr	r0, [r6]
	cmp	r0, #0x9
	ble	.L89	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r6]
	b	.L90
.L98:
	.align	2, 0
.L97:
	.word	0xfefe
.L89:
	mov	r0, sl
	add	r0, r0, #0x30
	mov	r1, r9
	add	r4, r1, r0
	ldr	r2, [r6]
	ldr	r3, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldrh	r1, [r5]
	strh	r1, [r0]
	cmp	r2, #0x9
	bne	.L90	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x40
	add	r0, r7, r0
	ldr	r1, [r0]
	str	r3, [r0]
	str	r1, [r4]
	mov	r0, ip
	add	r0, r0, #0x4
	add	r0, r0, r8
	mov	r1, #0x1
	strb	r1, [r0]
.L90:
	ldr	r0, [r6]
	cmp	r0, #0xa
	bgt	.L87	@cond_branch
	add	r0, r0, #0x1
	str	r0, [r6]
.L87:
	mov	r2, #0x4
	add	r9, r9, r2
	add	r6, r6, #0x4
	add	r5, r5, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x1
	ble	.L88	@cond_branch
	mov	r2, ip
	ldrb	r0, [r2]
	cmp	r0, #0x8
	bne	.L94	@cond_branch
	ldr	r3, .L99
	mov	r0, #0x0
	strh	r0, [r3]
	ldr	r2, .L99+0x4
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0xc0
	strh	r0, [r3]
.L94:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	0x400010e
	.word	0x4000128
.Lfe6:
	.size	 sub_020005C4,.Lfe6-sub_020005C4
	.align	2, 0
	.globl	sub_020006D8
	.type	 sub_020006D8,function
	.thumb_func
sub_020006D8:
	push	{lr}
	ldr	r1, .L103
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L102	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
.L102:
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gUnknown_020010D0
.Lfe7:
	.size	 sub_020006D8,.Lfe7-sub_020006D8
	.align	2, 0
	.globl	sub_020006F0
	.type	 sub_020006F0,function
	.thumb_func
sub_020006F0:
	push	{r4, lr}
	ldr	r3, .L106
	mov	r4, #0x0
	strh	r4, [r3]
	ldr	r2, .L106+0x4
	ldrh	r1, [r2]
	ldr	r0, .L106+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r3]
	ldr	r1, .L106+0xc
	ldr	r2, .L106+0x10
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x1c
	ldr	r0, .L106+0x14
	str	r0, [r1]
	add	r1, r1, #0xf6
	mov	r0, #0xc0
	strh	r0, [r1]
	ldr	r0, .L106+0x18
	strb	r4, [r0, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000128
	.word	0x2003
	.word	0xb1fc
	.word	gUnknown_020010D0
.Lfe8:
	.size	 sub_020006F0,.Lfe8-sub_020006F0
	.align	2, 0
	.globl	sub_02000740
	.type	 sub_02000740,function
	.thumb_func
sub_02000740:
	ldr	r1, .L109
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	bx	lr
.L110:
	.align	2, 0
.L109:
	.word	gUnknown_020010D0
.Lfe9:
	.size	 sub_02000740,.Lfe9-sub_02000740
	.align	2, 0
	.globl	sub_0200074C
	.type	 sub_0200074C,function
	.thumb_func
sub_0200074C:
	push	{r4, r5, r6, lr}
	ldr	r2, .L117
	ldr	r0, .L117+0x4
	ldr	r1, [r2, #0x34]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r2, #0x4]
	cmp	r1, #0x3
	bne	.L112	@cond_branch
	mov	r5, #0xc
	ldrb	r6, [r2, #0x15]
	mov	r4, r6
	mul	r4, r4, r5
	ldr	r1, [r2, #0x3c]
	cmp	r4, r1
	blt	.L113	@cond_branch
	ldr	r6, [r2, #0x40]
	mov	r5, #0x0
	mov	r0, #0x4
	strb	r0, [r2, #0x4]
	str	r0, [r2, #0x34]
	ldr	r1, .L117+0x8
	ldr	r0, .L117+0xc
	ldr	r2, [r1]
	mov	r1, #0x3
	bl	_call_via_r2
	b	.L114
.L118:
	.align	2, 0
.L117:
	.word	gUnknown_020011F0
	.word	gUnknown_02000D68
	.word	gSomeFuncPtr
	.word	0x105
.L113:
	add	r0, r4, #0
	add	r0, r0, #0xc
	cmp	r0, r1
	blt	.L114	@cond_branch
	sub	r5, r1, r4
	mov	r0, #0x4
	strb	r0, [r2, #0x4]
	str	r0, [r2, #0x34]
	ldr	r1, .L119
	ldr	r0, .L119+0x4
	ldr	r2, [r1]
	mov	r1, #0x3
	bl	_call_via_r2
.L114:
	cmp	r5, #0
	ble	.L116	@cond_branch
	ldr	r1, .L119+0x8
	ldr	r0, [r1, #0x38]
	add	r0, r0, r4
	add	r1, r1, #0x8
	lsr	r2, r5, #0x1f
	add	r2, r5, r2
	lsl	r2, r2, #0xa
	lsr	r2, r2, #0xb
	bl	CpuSet
.L116:
	ldr	r0, .L119+0x8
	strb	r6, [r0, #0x5]
	strb	r5, [r0, #0x6]
.L112:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gSomeFuncPtr
	.word	0x105
	.word	gUnknown_020011F0
.Lfe10:
	.size	 sub_0200074C,.Lfe10-sub_0200074C
	.align	2, 0
	.globl	sub_020007E0
	.type	 sub_020007E0,function
	.thumb_func
sub_020007E0:
	push	{lr}
	ldr	r0, .L146
	ldrb	r2, [r0, #0x14]
	ldr	r1, [r0, #0x34]
	add	r3, r0, #0
	cmp	r1, #0x5
	bhi	.L124	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L146+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L147:
	.align	2, 0
.L146:
	.word	gUnknown_020011F0
	.word	.L143
	.align	2, 0
	.align	2, 0
.L143:
	.word	.L124
	.word	.L128
	.word	.L130
	.word	.L134
	.word	.L122
	.word	.L139
.L124:
	cmp	r2, #0x1
	beq	.L144	@cond_branch
	cmp	r2, #0x2
	bne	.L122	@cond_branch
	b	.L144
.L128:
	cmp	r2, #0x2
	bne	.L122	@cond_branch
	str	r2, [r3, #0x34]
	ldr	r1, .L148
	ldr	r0, .L148+0x4
	ldr	r2, [r1]
	mov	r1, #0xb
	bl	_call_via_r2
	b	.L122
.L149:
	.align	2, 0
.L148:
	.word	gSomeFuncPtr
	.word	0x105
.L130:
	ldr	r0, [r3, #0x48]
	add	r0, r0, #0x1
	str	r0, [r3, #0x48]
	cmp	r2, #0x3
	bne	.L131	@cond_branch
	str	r2, [r3, #0x34]
	ldr	r1, .L150
	ldr	r0, .L150+0x4
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	_call_via_r2
	b	.L122
.L151:
	.align	2, 0
.L150:
	.word	gSomeFuncPtr
	.word	0x105
.L131:
	cmp	r2, #0x1
	bne	.L122	@cond_branch
	b	.L144
.L134:
	mov	r0, #0x1
	str	r0, [r3, #0x4c]
	cmp	r2, #0x4
	beq	.L145	@cond_branch
	cmp	r2, #0x3
	beq	.L122	@cond_branch
	mov	r0, #0x5
	str	r0, [r3, #0x34]
	b	.L122
.L139:
	cmp	r2, #0x4
	bne	.L140	@cond_branch
.L145:
	str	r2, [r3, #0x34]
	ldr	r1, .L152
	ldr	r0, .L152+0x4
	ldr	r2, [r1]
	mov	r1, #0x3
	bl	_call_via_r2
	b	.L122
.L153:
	.align	2, 0
.L152:
	.word	gSomeFuncPtr
	.word	0x105
.L140:
	cmp	r2, #0x3
	bne	.L122	@cond_branch
.L144:
	str	r2, [r3, #0x34]
.L122:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 sub_020007E0,.Lfe11-sub_020007E0
	.align	2, 0
	.globl	sub_020008A4
	.type	 sub_020008A4,function
	.thumb_func
sub_020008A4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldr	r0, .L165
	ldr	r0, [r0, #0x34]
	cmp	r0, #0x1
	bls	.L156	@cond_branch
	cmp	r0, #0x4
	bne	.L155	@cond_branch
.L156:
	ldr	r1, .L165+0x4
	ldr	r0, .L165+0x8
	ldr	r2, [r1]
	mov	r1, #0x6
	bl	_call_via_r2
	mov	r0, #0x1
	b	.L163
.L166:
	.align	2, 0
.L165:
	.word	gUnknown_020011F0
	.word	gSomeFuncPtr
	.word	0x105
.L155:
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r1, .L167
	ldr	r0, [r1, #0x34]
	cmp	r0, #0x4
	bne	.L157	@cond_branch
	mov	r0, #0x0
	str	r0, [r1, #0x34]
	ldr	r1, .L167+0x4
	ldr	r0, .L167+0x8
	ldr	r2, [r1]
	mov	r1, #0x5
	bl	_call_via_r2
.L157:
	add	r0, r6, #0
	bl	sub_0200074C
	ldr	r4, .L167+0xc
	add	r1, r4, #0
	add	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_02000340
	sub	r4, r4, #0x4
	str	r0, [r4]
	mov	r5, #0xc0
	lsl	r5, r5, #0x6
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L158	@cond_branch
	mov	r0, #0x3c
	str	r0, [r4, #0x44]
	ldr	r1, .L167+0x10
	ldr	r0, [r4, #0x34]
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L164
.L168:
	.align	2, 0
.L167:
	.word	gUnknown_020011F0
	.word	gSomeFuncPtr
	.word	0x105
	.word	gUnknown_020011F0+0x4
	.word	gUnknown_02000D6E
.L158:
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r2, #0xf
	add	r1, r0, #0
	and	r1, r1, r2
	lsr	r0, r0, #0x8
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L160	@cond_branch
	add	r0, r6, #0
	bl	sub_020007E0
	str	r5, [r4, #0x44]
	b	.L159
.L160:
	ldr	r0, [r4, #0x44]
	cmp	r0, #0x3b
	bgt	.L161	@cond_branch
	add	r0, r0, #0x1
	str	r0, [r4, #0x44]
	b	.L159
.L161:
	ldr	r0, .L169
	ldr	r1, [r4, #0x34]
	add	r1, r1, r0
	ldrb	r0, [r1]
.L164:
	str	r0, [r4, #0x34]
.L159:
	mov	r0, #0x0
.L163:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L170:
	.align	2, 0
.L169:
	.word	gUnknown_02000D6E
.Lfe12:
	.size	 sub_020008A4,.Lfe12-sub_020008A4
	.align	2, 0
	.globl	sub_02000980
	.type	 sub_02000980,function
	.thumb_func
sub_02000980:
	push	{r4, lr}
	ldr	r4, .L172
	mov	r2, #0x0
	str	r2, [r4, #0x34]
	str	r0, [r4, #0x38]
	str	r1, [r4, #0x3c]
	add	r0, r1, #0
	mov	r1, #0xc
	bl	__udivsi3
	str	r0, [r4, #0x40]
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gUnknown_020011F0
.Lfe13:
	.size	 sub_02000980,.Lfe13-sub_02000980
	.align	2, 0
	.globl	sub_020009A0
	.type	 sub_020009A0,function
	.thumb_func
sub_020009A0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L176
	ldr	r0, .L176+0x4
	ldr	r0, [r0, #0x34]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r5, [r0]
	ldr	r1, .L176+0x8
	ldr	r0, [r1]
	cmp	r0, r5
	beq	.L175	@cond_branch
	str	r5, [r1]
	ldr	r4, .L176+0xc
	ldr	r0, .L176+0x10
	ldr	r2, [r4]
	add	r1, r6, #0
	bl	_call_via_r2
	ldr	r0, .L176+0x14
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	ldr	r4, [r4]
	add	r1, r6, #0
	add	r3, r5, #0
	bl	_call_via_r4
.L175:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gStringTable
	.word	gUnknown_020011F0
	.word	gUnknown_02001060
	.word	gSomeFuncPtr
	.word	0x292
	.word	0x299
.Lfe14:
	.size	 sub_020009A0,.Lfe14-sub_020009A0
	.align	2, 0
	.globl	CpuSet
	.type	 CpuSet,function
	.thumb_func
CpuSet:
	svc #11
	.code	16
	bx	lr
.Lfe15:
	.size	 CpuSet,.Lfe15-CpuSet
